import re

from typing import List, Union


class Opcode:
    def __init__(self, mnemonic: str, pattern: Union[str, List[str]]):
        self.mneumonic = mnemonic.strip()
        self.patterns = [pattern] if isinstance(pattern, str) else pattern

    def __str__(self):
        return self.mneumonic

    def is_match(self, instruction: str) -> bool:
        for pattern in self.patterns:
            if re.match(pattern, instruction):
                return True
        return False


OPCODES = [
  Opcode("ADF   ", ".....111111..... .....011101....0"),
  Opcode("BSH   ", ".....11111100000 .....01101000010"),
  Opcode("BSW   ", ".....11111100000 .....01101000000"),
  Opcode("CAXI  ", ".....111111..... .....00011101110"),
  Opcode("CLR1  ", ".....111111..... 0000000011100100"),
  Opcode("CMOV  ", [".....111111..... .....011001....0", ".....111111..... .....011000....0"]),
  Opcode("CTRET ", "0000011111100000 0000000101000100"),
  Opcode("DI    ", "0000011111100000 0000000101100000"),
  Opcode("DIV   ", ".....111111..... .....01011000000"),
  Opcode("DIVH   ", ".....111111..... .....01010000000"),
  Opcode("DIVHU  ", ".....111111..... .....01010000010"),
  Opcode("DIVQ   ", ".....111111..... .....01011111100"),
  Opcode("DIVQU  ", ".....111111..... .....01011111110"),
  Opcode("DIVU   ", ".....111111..... .....01011000010"),
  Opcode("EI     ", "1000011111100000 0000000101100000"),
  Opcode("EIRET  ", "0000011111100000 0000000101001000"),
  Opcode("FERET  ", "0000011111100000 0000000101001010"),
  Opcode("HALT   ", "0000011111100000 0000000100100000"),
  Opcode("HSH    ", ".....111111..... .....01101000110"),
  Opcode("HSW    ", ".....11111100000 .....01101000100"),
  Opcode("LD.HU  ", ".....111111..... ...............1"),
  Opcode("LDSR   ", ".....111111..... 0000000000100000"),
  Opcode("MAC    ", ".....111111..... ....0011110....0"),
  Opcode("MACU   ", ".....111111..... ....0011111....0"),
  Opcode("MUL    ", [".....111111..... .....01000100000", ".....111111..... .....01001....00"]),
  Opcode("MULU   ", [".....111111..... .....01000100010", ".....111111..... .....01001....10"]),
  Opcode("NOT1   ", ".....111111..... 0000000011100010"),
  Opcode("RETI   ", "0000011111100000 0000000101000000"),
  Opcode("RIE    ", ".....1111111.... 0000000000000000"),
  Opcode("SAR    ", [".....111111..... 0000000010100000", ".....111111..... .....00010100010"]),
  Opcode("SASF   ", ".....1111110.... 0000001000000000"),
  Opcode("SATADD ", ".....111111..... .....01110111010"),
  Opcode("SATSUB ", ".....111111..... .....01110011010"),
  Opcode("SBF    ", ".....111111..... .....011100....0"),
  Opcode("SCH0L  ", ".....11111100000 .....01101100100"),
  Opcode("SCH0R  ", ".....11111100000 .....01101100000"),
  Opcode("SCH1L  ", ".....11111100000 .....01101100110"),
  Opcode("SCH1R  ", ".....11111100000 .....01101100010"),
  Opcode("SET1   ", ".....111111..... 0000000011100000"),
  Opcode("SETF   ", ".....1111110.... 0000000000000000"),
  Opcode("SHL    ", [".....111111..... 0000000011000000", ".....111111..... .....00011000010"]),
  Opcode("SHR    ", [".....111111..... 0000000010000000", ".....111111..... .....00010000010"]),
  Opcode("STSR   ", ".....111111..... 0000000001000000"),
  Opcode("SYSCALL", "11010111111..... 00...00101100000"),
  Opcode("TRAP   ", "00000111111..... 0000000100000000"),
  Opcode("TST1   ", ".....111111..... 0000000011100110"),

  Opcode("ABSF.D ", "....011111100000 ....010001011000"),
  Opcode("ABSF.S ", ".....11111100000 .....10001001000"),
  Opcode("ADDF.D ", "....0111111....0 ....010001110000"),
]


INSTRUCTIONS = [
  "1000111111100110 0111110011100000",
  "1001011111100110 0111010011100000",
  "1001111111100111 0011010011100000",
  "0011111111101000 0011010011100000",
  "0011111111101000 0100110011100000",
  "0011111111101001 0100010011100000",
  "0100011111101010 0100110011100000",
  "0100011111101010 1000110011100000",
  "0100011111101010 0110110011100010",
  "0100011111101010 1001110011100110",
  "0101111111101010 0100110011100010",
  "0110011111101010 1001110011100000",
  "0110111111101010 0101110011100110",
  "1001111111101010 0111010011100110",
  "1010011111101010 1001110011100110",
  "1100011111101010 0011110011100000",
  "1101111111101010 1101110011100000",
  "0100011111101011 0110110011100000",
  "0101011111101011 0110110011100000",
  "1100011111101100 0110100000100000",
  "1100011111101100 0010000000100000",
  "0011111111101100 1101010011100000",
  "0110011111101101 0111010011100000",
  "1000111111101101 0111010011100000",
  "1110111111101101 1000110011100000",
  "0110011111101110 0111110011100000",
  "0110011111101110 1011110011100000",
  "1101111111101110 1101110011100000",
  "0111111111101111 0110010011100000",
  "0111011111110000 0111110011100000",
  "1000111111110000 0110110011100000",
  "0111011111110001 0110110011100110",
  "0111011111110001 0111110011100110",
  "0111111111110001 1000010011100110",
  "1000011111110001 1001110011100000",
  "0100111111110010 0111010011100000",
  "1000011111110011 0100010011100000",
  "1000011111110011 0110110011100000",
  "0111011111110100 1000110011100000",
  "0101011111110100 1011110011100000",
  "0110011111111000 0010000001000000",
  "0110011111111000 0000100001000000",
  "0110011111111000 0110100001000000",
  "0111111111111000 0101110011100000",
  "1100011111111100 1111100101100000",
]


if __name__ == "__main__":
  print("Total opcodes:", len(OPCODES))

  for instruction in INSTRUCTIONS:
    print(instruction)
    for op in OPCODES:
      if op.is_match(instruction):
        print("  ", op)
